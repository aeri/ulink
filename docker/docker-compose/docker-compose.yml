version: '2.1'
networks:
    cluster:
        driver: bridge
    web:
        driver: bridge
    monitor-net:
        driver: bridge

volumes:
    pgmaster:
    pgslave1:
    pgslave2:
    pgslave3:
    pgslave4:
    backup:
    prometheus_data: {}
    grafana_data: {}

services:
    prometheus:
      image: prom/prometheus:v2.14.0
      container_name: prometheus
      volumes:
        - ./prometheus:/etc/prometheus
        - prometheus_data:/prometheus
      command:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
      restart: unless-stopped
      expose:
        - 9090
      networks:
        - monitor-net
      labels:
        org.label-schema.group: "monitoring"

    alertmanager:
      image: prom/alertmanager:v0.19.0
      container_name: alertmanager
      volumes:
        - ./alertmanager:/etc/alertmanager
      command:
        - '--config.file=/etc/alertmanager/config.yml'
        - '--storage.path=/alertmanager'
      restart: unless-stopped
      expose:
        - 9093
      networks:
        - monitor-net
      labels:
        org.label-schema.group: "monitoring"

    nodeexporter:
      image: prom/node-exporter:v0.18.1
      container_name: nodeexporter
      volumes:
        - /proc:/host/proc:ro
        - /sys:/host/sys:ro
        - /:/rootfs:ro
      command:
        - '--path.procfs=/host/proc'
        - '--path.rootfs=/rootfs'
        - '--path.sysfs=/host/sys'
        - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      restart: unless-stopped
      expose:
        - 9100
      networks:
        - monitor-net
      labels:
        org.label-schema.group: "monitoring"

    cadvisor:
      image: gcr.io/google-containers/cadvisor:v0.34.0
      container_name: cadvisor
      volumes:
        - /:/rootfs:ro
        - /var/run:/var/run:rw
        - /sys:/sys:ro
        - /var/lib/docker:/var/lib/docker:ro
        #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
      restart: unless-stopped
      expose:
        - 8080
      networks:
        - monitor-net
      labels:
        org.label-schema.group: "monitoring"

    grafana:
      image: grafana/grafana:6.5.1
      container_name: grafana
      volumes:
        - grafana_data:/var/lib/grafana
        - ./grafana/provisioning:/etc/grafana/provisioning
      environment:
        - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
        - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
        - GF_USERS_ALLOW_SIGN_UP=false
      restart: unless-stopped
      expose:
        - 3000
      networks:
        - monitor-net
      labels:
        org.label-schema.group: "monitoring"

    pushgateway:
      image: prom/pushgateway:v1.0.0
      container_name: pushgateway
      restart: unless-stopped
      expose:
        - 9091
      networks:
        - monitor-net
      labels:
        org.label-schema.group: "monitoring"

    caddy:
      image: stefanprodan/caddy
      container_name: caddy
      ports:
        - "3000:3000"
        - "9090:9090"
        - "9093:9093"
        - "9091:9091"
      volumes:
        - ./caddy:/etc/caddy
      environment:
        - ADMIN_USER=${ADMIN_USER:-admin}
        - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      restart: unless-stopped
      networks:
        - monitor-net
      labels:
        org.label-schema.group: "monitoring"

    pgmaster:
        build:
            context: ../src
            dockerfile: Postgres-11-Repmgr-4.0.Dockerfile
        environment:
            NODE_ID: 1 # Integer number of node (not required if can be extracted from NODE_NAME var, e.g. node-45 => 1045)
            NODE_NAME: node1 # Node name
            CLUSTER_NODE_NETWORK_NAME: pgmaster # (default: hostname of the node)
            
            PARTNER_NODES: "pgmaster,pgslave1,pgslave3"
            REPLICATION_PRIMARY_HOST: pgmaster # That should be ignored on the same node
            
            NODE_PRIORITY: 100  # (default: 100)
            SSH_ENABLE: 1
            #database we want to use for application
            POSTGRES_PASSWORD: monkey_pass
            POSTGRES_USER: monkey_user
            POSTGRES_DB: monkey_db
            CLEAN_OVER_REWIND: 0
            CONFIGS_DELIMITER_SYMBOL: ;
            CONFIGS: "listen_addresses:'*';max_replication_slots:5"
                                  # in format variable1:value1[,variable2:value2[,...]] if CONFIGS_DELIMITER_SYMBOL=, and CONFIGS_ASSIGNMENT_SYMBOL=:
                                  # used for pgpool.conf file
            #defaults:
            CLUSTER_NAME: pg_cluster # default is pg_cluster
            REPLICATION_DB: replication_db # default is replication_db
            REPLICATION_USER: replication_user # default is replication_user
            REPLICATION_PASSWORD: replication_pass # default is replication_pass
            
        ports:
            - 5422:5432
        volumes:
            - pgmaster:/var/lib/postgresql/data
            - ./ssh/:/tmp/.ssh/keys
        networks:
            cluster:
                aliases:
                    - pgmaster
#<<< Branch 1
    pgslave1:
        build:
            context: ../src
            dockerfile: Postgres-11-Repmgr-4.0.Dockerfile
        environment:
            NODE_ID: 2
            NODE_NAME: node2
            CLUSTER_NODE_NETWORK_NAME: pgslave1 # (default: hostname of the node)
            SSH_ENABLE: 1
            PARTNER_NODES: "pgmaster,pgslave1,pgslave3"
            REPLICATION_PRIMARY_HOST: pgmaster
            CLEAN_OVER_REWIND: 1
            CONFIGS_DELIMITER_SYMBOL: ;
            CONFIGS: "max_replication_slots:10" #some overrides
        ports:
            - 5441:5432
        volumes:
            - pgslave1:/var/lib/postgresql/data
            - ./ssh:/tmp/.ssh/keys
        networks:
            cluster:
                aliases:
                    - pgslave1

    # Add more slaves if required
    pgslave2:
        build:
            context: ../src
            dockerfile: Postgres-11-Repmgr-4.0.Dockerfile
        environment:
            NODE_ID: 3
            NODE_NAME: node3
            CLUSTER_NODE_NETWORK_NAME: pgslave2 # (default: hostname of the node)

            REPLICATION_PRIMARY_HOST: pgslave1 # I want to have cascade Streeming replication
            #USE_REPLICATION_SLOTS: 0
            CONFIGS_DELIMITER_SYMBOL: ;
            CONFIGS: "listen_addresses:'*'"
        ports:
            - 5442:5432
        volumes:
            - pgslave2:/var/lib/postgresql/data
        networks:
            cluster:
                aliases:
                    - pgslave2
#>>> Branch 1
#<<< Branch 2
    pgslave3:
        build:
            context: ../src
            dockerfile: Postgres-11-Repmgr-4.0.Dockerfile
        environment:
            NODE_ID: 4
            NODE_NAME: node4
            CLUSTER_NODE_NETWORK_NAME: pgslave3 # (default: hostname of the node)
            SSH_ENABLE: 1
            PARTNER_NODES: "pgmaster,pgslave1,pgslave3"
            REPLICATION_PRIMARY_HOST: pgmaster
            NODE_PRIORITY: 200  # (default: 100)
            CLEAN_OVER_REWIND: 1
            CONFIGS_DELIMITER_SYMBOL: ;
            CONFIGS: "listen_addresses:'*'"
        ports:
            - 5443:5432
        volumes:
            - pgslave3:/var/lib/postgresql/data
            - ./ssh:/tmp/.ssh/keys
        networks:
            cluster:
                aliases:
                    - pgslave3

    pgslave4:
        build:
            context: ../src
            dockerfile: Postgres-11-Repmgr-4.0.Dockerfile
        environment:
            NODE_ID: 5
            NODE_NAME: node5
            CLUSTER_NODE_NETWORK_NAME: pgslave4 # (default: hostname of the node)

            REPLICATION_PRIMARY_HOST: pgslave3
            #USE_REPLICATION_SLOTS: 0
            CONFIGS_DELIMITER_SYMBOL: ;
            CONFIGS: "listen_addresses:'*'"
        ports:
            - 5444:5432
        volumes:
            - pgslave4:/var/lib/postgresql/data
        networks:
            cluster:
                aliases:
                    - pgslave4
#>>> Branch 2
    backup:
        build:
            context: ../src
            dockerfile: Barman-2.4-Postgres-11.Dockerfile
        environment:
            REPLICATION_USER: replication_user # default is replication_user
            REPLICATION_PASSWORD: replication_pass # default is replication_pass
            REPLICATION_HOST: pgmaster
            POSTGRES_PASSWORD: monkey_pass
            POSTGRES_USER: monkey_user
            POSTGRES_DB: monkey_db
            SSH_ENABLE: 1
            BACKUP_SCHEDULE: "*/30 */5 * * *"
        volumes:
            - backup:/var/backups
            - ./ssh:/tmp/.ssh/keys
        networks:
            cluster:
                aliases:
                    - backup
    pgpool:
        build:
            context: ../src
            dockerfile: Pgpool-3.7-Postgres-11.Dockerfile
        environment:
            PCP_USER: pcp_user
            PCP_PASSWORD: pcp_pass
            WAIT_BACKEND_TIMEOUT: 60

            CHECK_USER: monkey_user
            CHECK_PASSWORD: monkey_pass
            CHECK_PGCONNECT_TIMEOUT: 3 #timout for checking if primary node is healthy
            SSH_ENABLE: 1
            DB_USERS: monkey_user:monkey_pass # in format user:password[,user:password[...]]
            BACKENDS: "0:pgmaster:5432:1:/var/lib/postgresql/data:ALLOW_TO_FAILOVER,1:pgslave1::::,3:pgslave3::::,2:pgslave2::::" #,4:pgslaveDOES_NOT_EXIST::::
                      # in format num:host:port:weight:data_directory:flag[,...]
                      # defaults:
                      #   port: 5432
                      #   weight: 1
                      #   data_directory: /var/lib/postgresql/data
                      #   flag: ALLOW_TO_FAILOVER
            REQUIRE_MIN_BACKENDS: 3 # minimal number of backends to start pgpool (some might be unreachable)
            CONFIGS: "num_init_children:250,max_pool:4"
                      # in format variable1:value1[,variable2:value2[,...]] if CONFIGS_DELIMITER_SYMBOL=, and CONFIGS_ASSIGNMENT_SYMBOL=:
                      # used for pgpool.conf file
        ports:
            - 5430:5432
            - 9898:9898 # PCP
        volumes:
            - ./ssh:/tmp/.ssh/keys
        networks:
            cluster:
                aliases:
                    - pgpool
            web:
                aliases:
                    - pgpool
    web:
        image: ulink-spring:latest
        ports:
            - 80:8080
        depends_on:
            pgpool:
                condition: service_healthy
        networks:
            web:
                aliases:
                    - web
     
    adminer:
        image: adminer
        restart: always
        ports:
            - 8080:8080
        networks:
            web:
                aliases:
                    - adminer

